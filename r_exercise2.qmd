---
title: "Untitled"
format: html
---

# Task 1: Import your data

```{r}
library("readr") 
library("sf") 
library(ggplot2)
library(dplyr)
library(tmap)

wildschwein_BE <- read_delim("wildschwein_BE_2056.csv", ",")

wildschwein_BE <- st_as_sf(wildschwein_BE, coords = c("E", "N"), crs = 2056, remove = FALSE)
```

# Task 2: Getting an overview

```{r}
lead(wildschwein_BE$DatetimeUTC)

wildschwein_BE <- group_by(wildschwein_BE, TierID)

wildschwein_BE$diff <- as.numeric(difftime(lead(wildschwein_BE$DatetimeUTC), wildschwein_BE$DatetimeUTC, units = "secs"))

wildschwein <- wildschwein_BE
as.integer(wildschwein$diff)

wildschwein$TierName |> 
  unique() # drei wildschweine 
ggplot(wildschwein, aes(DatetimeUTC, TierName))+
  geom_point() # unterschiedlich lange Aufnahmeperioden in den Jahren 2014 und 2015

ggplot(wildschwein, aes(diff/60))+
  geom_histogram(binwith = 1)+
  lims(x=c(0,5000/60))+
  scale_y_log10()

wildschwein |> 
  filter(DatetimeUTC < "2014-08-24") |> 
  ggplot(aes(DatetimeUTC, diff, color = TierName))+
  geom_point() # die Aufnahmeintervalle sind in der Nacht höher als am Tag
```

# Task 3: Deriving movement parameters I: Speed

```{r}
N1 <- 1204752
N2 <- 1204863
E1 <- 2570409
E2 <- 2570402

sqrt((E1-E2)^2 + (N1-N2)^2) # Formel

wildschwein <- wildschwein |> 
  group_by(TierName) |> 
  mutate(steplength_m = sqrt((E-lead(E))^2 + (N-lead(N))^2)) # Distanz

wildschwein <- wildschwein |> 
  mutate(speed_ms = steplength_m/diff) # Geschwindigkeit

hist(wildschwein$speed_ms)

```

# Task 4: Cross-scale movement analysis

```{r}
caro <- read_delim("caro60.csv", ",")
caro <- st_as_sf(caro, coords = c("E", "N"), crs = 2056, remove = FALSE)

# reduce the granularity of our sampling interval
caro_3 <- caro |> 
  slice(seq(from = 1, to =200, by = 3))
nrow(caro_3) # 67

caro_6 <- caro |> 
  slice(seq(from = 1, to =200, by = 6))
nrow(caro_6) # 34

caro_9 <- caro |> 
  slice(seq(from = 1, to =200, by = 9))
nrow(caro_9) # 23
  
# calculate timelag, steplength and speed
caro <- caro |> 
  mutate(
    timelag = as.numeric(difftime(lead(DatetimeUTC), DatetimeUTC, units = "secs")),
    steplength = sqrt((E-lead(E))^2 + (N-lead(N))^2),
    speed = steplength/timelag
    )

caro_3 <- caro_3 |> 
  mutate(
    timelag = as.numeric(difftime(lead(DatetimeUTC), DatetimeUTC, units = "secs")),
    steplength = sqrt((E-lead(E))^2 + (N-lead(N))^2),
    speed = steplength/timelag
    )

caro_6 <- caro_6 |> 
  mutate(
    timelag = as.numeric(difftime(lead(DatetimeUTC), DatetimeUTC, units = "secs")),
    steplength = sqrt((E-lead(E))^2 + (N-lead(N))^2),
    speed = steplength/timelag
    )

caro_9 <- caro_9 |> 
  mutate(
    timelag = as.numeric(difftime(lead(DatetimeUTC), DatetimeUTC, units = "secs")),
    steplength = sqrt((E-lead(E))^2 + (N-lead(N))^2),
    speed = steplength/timelag
    )

# compare the speeds visually in a line plot and also visualize the trajectories in a map
ggplot()+ # mehrere Layer
  geom_sf(data = caro)+
  geom_sf(data = caro_3, aes(color = "orange"))+
  theme_void()
# ??? Wie kann ich Linien hinzufügen?

ggplot()+ # mehrere Layer
  geom_sf(data = caro)+
  geom_sf(data = caro_6, aes(color = "orange"))+
  theme_void()
# ??? Wie kann ich Linien hinzufügen?

ggplot()+ # mehrere Layer
  geom_sf(data = caro)+
  geom_sf(data = caro_9, aes(color = "orange"))+
  theme_void()
# ??? Wie kann ich Linien hinzufügen?



ggplot()+
  geom_line(data = caro, aes(DatetimeUTC, speed))+
  geom_line(data = caro_3, aes(DatetimeUTC, speed), color = "red")+
  geom_line(data = caro_6, aes(DatetimeUTC, speed), color = "green")+
  geom_line(data = caro_9, aes(DatetimeUTC, speed), color = "blue")+
  theme_classic()# je weniger Datenpunkte, desto smoother die Kurve
```

# Task 5 (optional): Deriving movement parameters II: Rolling window functions

```{r}
library("zoo")

example <- rnorm(10)
rollmean(example, k = 3, fill = NA, align = "left")

rollmean(example, k = 4, fill = NA, align = "left")

# mache ich evtl. später...
```

# Task 6: Add your movement data to your repository

```{r}
# erledigt

posmo <- read_csv("posmo_2023-03-01T00_00_00+01_00-2023-04-28T23_59_59+02_00.csv")
posmo <- st_as_sf(posmo, coords = c("lon_x", "lat_y"), crs = 2056, remove = FALSE)

ggplot(posmo)+
  geom_sf() # Anfangs hat die App wegen einem Energiesparmodus nicht richtig funktioniert, daher ein bisschen abgehackt...

tm_shape(posmo) +
  tm_dots()

```

# Task 7: Explore your movement data

```{r}
posmo <- read_csv("posmo_2023-03-01T00_00_00+01_00-2023-04-28T23_59_59+02_00.csv")
posmo <- st_as_sf(posmo, coords = c("lon_x", "lat_y"), crs = 2056, remove = FALSE)

ggplot(posmo)+
  geom_sf() # sehr klein und unübersichtlich

# ??? Warum zeigt es hier nicht schweizer Koordinaten an?
  

tmap_mode("view") # Interaktive Karte, warum funktioniert dies nicht???
tm_shape(posmo) +
  tm_dots() 

ggplot(posmo)+
  geom_sf()+
  lims(x=c(max(17.11106), mean(16.36766)))

```

